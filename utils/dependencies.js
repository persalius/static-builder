import { execSync } from "child_process";
import { paths } from "../paths.js";
import fs from "fs";
import path from "path";

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ landing page –ø—Ä–æ–µ–∫—Ç–µ
 * @param {boolean} verbose - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 * @returns {string} –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É Vite
 */
export function ensureDependencies(verbose = false) {
  const packageJsonPath = path.resolve(paths.landingPage, "package.json");
  const nodeModulesPath = path.resolve(paths.landingPage, "node_modules");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ package.json
  if (!fs.existsSync(packageJsonPath)) {
    console.error(`‚ùå package.json not found in ${paths.landingPage}`);
    process.exit(1);
  }

  // –ß–∏—Ç–∞–µ–º package.json –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  let packageJson = {};
  if (verbose) {
    try {
      packageJson = JSON.parse(fs.readFileSync(packageJsonPath, "utf-8"));
      console.log(`üì¶ Project: ${packageJson.name || "Unknown"}`);
    } catch (error) {
      console.warn("‚ö†Ô∏è Could not read package.json details");
    }
  }

  // –ï—Å–ª–∏ node_modules –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  if (!fs.existsSync(nodeModulesPath)) {
    console.log("üì¶ Installing dependencies in landing page...");
    try {
      execSync("npm install", {
        cwd: paths.landingPage,
        stdio: "inherit",
      });
      console.log("‚úÖ Dependencies installed successfully!");
    } catch (error) {
      console.error("‚ùå Failed to install dependencies:", error.message);
      process.exit(1);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Vite –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
  const vitePath = path.resolve(paths.landingPage, "node_modules/.bin/vite");
  if (!fs.existsSync(vitePath)) {
    console.log("üì¶ Vite not found, reinstalling dependencies...");
    try {
      execSync("npm install", {
        cwd: paths.landingPage,
        stdio: "inherit",
      });
      console.log("‚úÖ Dependencies reinstalled successfully!");
    } catch (error) {
      console.error("‚ùå Failed to install dependencies:", error.message);
      process.exit(1);
    }
  }

  if (verbose) {
    console.log("‚úÖ All dependencies are ready!");
  }

  return vitePath;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Vite –ø—É—Ç–∏
 * @param {string} vitePath - –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É Vite
 */
export function validateVitePath(vitePath) {
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–Ω—É—Ç—Ä–∏ –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  const normalizedLandingPath = path.resolve(paths.landingPage);
  const normalizedVitePath = path.resolve(vitePath);

  if (!normalizedVitePath.startsWith(normalizedLandingPath)) {
    console.error(`‚ùå Security: Vite path outside of landing page directory`);
    process.exit(1);
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ñ–∞–π–ª, –∞ –Ω–µ –ø–∞–ø–∫–∞
  if (!fs.statSync(vitePath).isFile()) {
    console.error(`‚ùå Vite path is not a file: ${vitePath}`);
    process.exit(1);
  }
}
